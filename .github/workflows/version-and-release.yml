name: Version and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  # Workflow dispatch for automatic releases
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read
  issues: write
  repository-projects: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Build application
      run: npm run build

  # Automatic release when main branch is updated (git flow release finish)
  release:
    needs: test
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' && 
      !startsWith(github.event.head_commit.message, 'chore: release v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Determine release type based on commits
      id: release_type
      run: |
        # Check for BREAKING CHANGE or feat! in recent commits
        if git log --format=%B -n 10 | grep -E "(BREAKING CHANGE|feat!|fix!)" > /dev/null; then
          echo "increment=major" >> $GITHUB_OUTPUT
        elif git log --format=%B -n 10 | grep "^feat" > /dev/null; then
          echo "increment=minor" >> $GITHUB_OUTPUT
        else
          echo "increment=patch" >> $GITHUB_OUTPUT
        fi
    
    - name: Release with release-it (automatic)
      run: npx release-it --ci --increment ${{ steps.release_type.outputs.increment }} --verbose
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version
      id: version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
    - name: Merge back to develop
      run: |
        git fetch origin develop
        git checkout develop
        git merge main --no-ff -m "chore: merge main back to develop after release v${{ steps.version.outputs.version }}"
        git push origin develop
    
    - name: Trigger Docker Build
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: docker-build
        client-payload: '{"version": "${{ steps.version.outputs.version }}"}'

  # Manual release via workflow dispatch
  manual-release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Determine release type based on commits
      id: manual_release_type
      run: |
        # Check for BREAKING CHANGE or feat! in recent commits
        if git log --format=%B -n 10 | grep -E "(BREAKING CHANGE|feat!|fix!)" > /dev/null; then
          echo "increment=major" >> $GITHUB_OUTPUT
        elif git log --format=%B -n 10 | grep "^feat" > /dev/null; then
          echo "increment=minor" >> $GITHUB_OUTPUT
        else
          echo "increment=patch" >> $GITHUB_OUTPUT
        fi
    
    - name: Release with release-it (manual)
      run: npx release-it --ci --increment ${{ steps.manual_release_type.outputs.increment }} --verbose
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version
      id: version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
    - name: Merge back to develop
      run: |
        git fetch origin develop
        git checkout develop
        git merge main --no-ff -m "chore: merge main back to develop after release v${{ steps.version.outputs.version }}"
        git push origin develop
    
    - name: Trigger Docker Build
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: docker-build
        client-payload: '{"version": "${{ steps.version.outputs.version }}"}'

  # Hotfix release process
  hotfix-release:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      startsWith(github.ref, 'refs/heads/hotfix/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: |
        npm run lint
        npm test
        npm run build
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Extract hotfix version
      id: hotfix_version
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/hotfix/}
        echo "version=$BRANCH_NAME" >> $GITHUB_OUTPUT
    
    - name: Create hotfix pre-release
      run: npx release-it --ci --increment patch --preRelease=hotfix --verbose
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}